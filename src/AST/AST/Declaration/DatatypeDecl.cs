namespace AST;

public class DatatypeConstructor
: Declaration, ConstructableFromDafny<Dafny.DatatypeCtor, DatatypeConstructor> {
  public string Name { get; }
  public List<Formal> Formals = new();

  public DatatypeConstructor(string name, IEnumerable<Formal> formals) {
    Name = name;
    Formals.AddRange(formals);
  }

  private DatatypeConstructor(Dafny.DatatypeCtor dcd)
  : this(dcd.Name, dcd.Formals.Select(Formal.FromDafny)) { }

  public static DatatypeConstructor FromDafny(Dafny.DatatypeCtor dafnyNode) {
    return new DatatypeConstructor(dafnyNode);
  }
}

// TODO: Inherit from field?
// This is an autogenerated field that should not be printed.
public class DatatypeDestructor : MemberDecl,
ConstructableFromDafny<Dafny.DatatypeDestructor, DatatypeDestructor> {
  // Within the same datatype, fields of the same name within different 
  // constructors share the same destructor.
  public Dictionary<DatatypeConstructor, Formal> Destructors = new();

  private DatatypeDestructor(Dafny.DatatypeDestructor dd) {
    // TODO: This implementation is wrong, instead of constructing another 
    // constructor from scratch, we should keep track and reuse existing constructors.
    foreach (var (c, f) in dd.EnclosingCtors.Zip(dd.CorrespondingFormals)) {
      Destructors.Add(DatatypeConstructor.FromDafny(c), Formal.FromDafny(f));
    }
  }

  public static DatatypeDestructor FromDafny(Dafny.DatatypeDestructor dafnyNode) {
    return new DatatypeDestructor(dafnyNode);
  }
}

public class DatatypeDiscriminator : MemberDecl,
ConstructableFromDafny<Dafny.DatatypeDiscriminator, DatatypeDiscriminator> {
  public string Name { get; }

  private DatatypeDiscriminator(Dafny.DatatypeDiscriminator dd) {
    Name = dd.Name;
  }

  public static DatatypeDiscriminator FromDafny(Dafny.DatatypeDiscriminator dafnyNode) {
    return new DatatypeDiscriminator(dafnyNode);
  }
}

public class InductiveDatatypeDecl : TopLevelDecl,
ConstructableFromDafny<Dafny.IndDatatypeDecl, InductiveDatatypeDecl> {
  public string Name { get; }
  public List<TypeParameter> TypeParameters = new();
  public List<DatatypeConstructor> Constructors = new();
  public List<MemberDecl> Members = new();

  public InductiveDatatypeDecl(string name,
    IEnumerable<TypeParameter> typeParameters,
    IEnumerable<DatatypeConstructor> constructors,
    IEnumerable<MemberDecl> members) {
    Name = name;
    TypeParameters.AddRange(typeParameters);
    Constructors.AddRange(constructors);
    Members.AddRange(members);
  }

  private InductiveDatatypeDecl(Dafny.IndDatatypeDecl idd)
  : this(idd.Name,
    idd.TypeArgs.Select(TypeParameter.FromDafny),
    idd.Ctors.Select(DatatypeConstructor.FromDafny),
    idd.Members.Select(MemberDecl.FromDafny)) { }

  public static InductiveDatatypeDecl FromDafny(Dafny.IndDatatypeDecl dafnyNode) {
    return new InductiveDatatypeDecl(dafnyNode);
  }
}