namespace AST;

public partial class DatatypeConstructorDecl : MemberDecl { }
public partial class DatatypeDestructorDecl : FieldDecl { }
public partial class DatatypeDiscriminatorDecl : FieldDecl { }

public partial class DatatypeConstructorDecl : MemberDecl {
  public override string Name { get; protected set; }
  public readonly List<Formal> Parameters = new();

  public string DatatypeName => EnclosingDecl.Name;
  public bool HasParameters() => Parameters.Count > 0;

  public DatatypeConstructorDecl(DatatypeDecl enclosingDecl,
  string name, IEnumerable<Formal>? parameters = null)
  : base(enclosingDecl) {
    Name = name;
    if (parameters != null) {
      Parameters.AddRange(parameters);
    }
  }

  public override IEnumerable<Node> Children => Parameters;

}

// This is an autogenerated declaration that should not be printed.
public partial class DatatypeDestructorDecl : FieldDecl {
  // Within the same datatype, fields of the same name and type within different 
  // constructors share the same destructor.
  // public Dictionary<DatatypeConstructorDecl, Formal> Destructors = new();

  public DatatypeDestructorDecl(TopLevelDecl enclosingDecl,
  string name, Type type)
  : base(enclosingDecl, name, type) { }

  public DatatypeDestructorDecl(TopLevelDecl enclosingDecl,
  Formal constructorFormal)
  : this(enclosingDecl, constructorFormal.Name, constructorFormal.Type) { }
}

// This is an autogenerated declaration that should not be printed.
public partial class DatatypeDiscriminatorDecl : FieldDecl {
  public DatatypeDiscriminatorDecl(TopLevelDecl enclosingDecl,
  string constructorName)
  : base(enclosingDecl, constructorName + "?", Type.Bool) { }

  public DatatypeDiscriminatorDecl(DatatypeConstructorDecl constructor)
  : this(constructor.EnclosingDecl, constructor.Name) { }
}
