namespace AST;

public abstract partial class Expression : Node {
  private Type? _Type;
  public virtual Type Type {
    get => _Type ?? throw new ASTException($"Type not set for `{this}`.");
    set => _Type = value;
  }
}

public partial class ParensExpr : Expression {
  public Expression E { get; set; }
  public override Type Type => E.Type;

  public ParensExpr(Expression e) {
    E = e;
  }

  public override IEnumerable<Node> Children => new[] { E };
}

public partial class AutoGeneratedExpr : Expression {
  public Expression E { get; set; }
  public override Type Type => E.Type;

  public AutoGeneratedExpr(Expression e) {
    E = e;
  }

  public override IEnumerable<Node> Children => new[] { E };
}

public partial class WildcardExpr : Expression {
  public override IEnumerable<Node> Children => Enumerable.Empty<Node>();
}
